class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    private Node head;
    private Node tail;

    LinkedList() {
        head = null;
        tail = null;
    }

    // Method to insert data at the end
    public void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
    }

    // Method to insert data at the head
    public void insertAtHead(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.next = head;
            head = newNode;
        }
    }

    // Method to insert data at a specific index
    public void insertAtIndex(int data, int index) {
        if (index < 0)
            throw new IndexOutOfBoundsException("Index cannot be negative");
        if (index == 0) {
            insertAtHead(data);
            return;
        }
        Node newNode = new Node(data);
        Node current = head;
        int count = 0;
        while (count < index - 1 && current != null) {
            current = current.next;
            count++;
        }
        if (current == null) {
            throw new IndexOutOfBoundsException("Index out of bounds");
        }
        newNode.next = current.next;
        current.next = newNode;
        if (current == tail) {
            tail = newNode;
        }
    }

    // Method to display the elements of the linked list
    public void show() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    // Method to delete a specific element
    public void delete(int data) {
        if (head == null)
            return;

        if (head.data == data) {
            head = head.next;
            if (head == null) {
                tail = null;
            }
            return;
        }

        Node current = head;
        while (current.next != null && current.next.data != data) {
            current = current.next;
        }

        if (current.next == null)
            return;

        if (current.next == tail) {
            tail = current;
        }

        current.next = current.next.next;
    }

    // Method to delete element at a specific index
    public void deleteAtIndex(int index) {
        if (index < 0)
            throw new IndexOutOfBoundsException("Index cannot be negative");
        if (index == 0) {
            if (head != null) {
                head = head.next;
                if (head == null) {
                    tail = null;
                }
            }
            return;
        }
        Node current = head;
        int count = 0;
        while (count < index - 1 && current != null) {
            current = current.next;
            count++;
        }
        if (current == null || current.next == null) {
            throw new IndexOutOfBoundsException("Index out of bounds");
        }
        if (current.next == tail) {
            tail = current;
        }
        current.next = current.next.next;
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.insert(5);
        list.insert(10);
        list.insert(15);
        list.insertAtHead(1);
        list.insertAtIndex(100, 2);

        System.out.println("Original Linked List:");
        list.show();

        list.delete(10);
        System.out.println("Linked List after deleting 10:");
        list.show();

        list.deleteAtIndex(2);
        System.out.println("Linked List after deleting element at index 2:");
        list.show();
    }
}

